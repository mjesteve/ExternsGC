/** @externs */
/** @suppress {duplicate,checkTypes,externsValidation,uselessCode} */

/** Namespace global cuando se usa como script. */
/** @const */ var inspiretree = inspiretree || {};
/** @const */ inspiretree.dom = inspiretree.dom || {};

/** Declaraciones CommonJS (sin asignaciones en externs). */
/** @const {!Object} */ var module;
/** @type {*} */ module.exports;
/** @const {!Object} */ var exports;

/** Alias que Closure puede usar tras reescritura CJS (declaración). */
/** @const */ var module$exports$inspiretree;
/** @const */ var module$exports$inspiretree$dom;

/**
 * @externs
 * @suppress {checkTypes,const,duplicate,missingOverride}
 */
// NOTE: generated by tsickle, do not edit.
// Generated from: inspire-tree-dom.d.ts
/** @const */
var inspiretree = {};
/**
 * @record
 * @struct
 */
inspiretree.DropTargetValidator = function() {};

/* TODO: CallSignature: inspiretree */
/**
 * @record
 * @struct
 */
inspiretree.Config = function() {};
/** @type {boolean} */
inspiretree.Config.prototype.autoLoadMore;
/** @type {boolean} */
inspiretree.Config.prototype.deferredRendering;
/** @type {{enabled: boolean, validateOn: string, validate: !inspiretree.DropTargetValidator}} */
inspiretree.Config.prototype.dragAndDrop;
/** @type {number} */
inspiretree.Config.prototype.nodeHeight;
/** @type {boolean} */
inspiretree.Config.prototype.showCheckboxes;
/** @type {?|undefined} */
inspiretree.Config.prototype.dragTargets;
/** @type {number} */
inspiretree.Config.prototype.tabindex;
/** @type {*} */
inspiretree.Config.prototype.target;

/**
 * @constructor
 * @struct
 * @public
 * @param {*} tree
 * @param {!inspiretree.Config} opts
 */
inspiretree.InspireTreeDOM = function(tree, opts) {};


/**
 * @suppress {duplicate}
 * Publica el constructor DOM bajo el namespace lógico inspiretree.dom.
 */
if (typeof inspiretree !== "undefined") {
  /** @type {function(*, !Object)} */
  inspiretree.dom.InspireTreeDOM = /** @type {?} */ (typeof InspireTreeDOM !== "undefined" ? InspireTreeDOM : undefined);
}

